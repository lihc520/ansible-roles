---
- name: Install dependencies
  package:
    name: "{{ item }}"
    state: latest
  with_items:
    - openssl
    - libbz2-dev
    - libxml2-dev
    - libjpeg-dev
    - libssl-dev
    - libpng-dev
    - libfreetype6-dev
    - libcurl4-openssl-dev
    - libzip-dev
    - libsqlite3-dev
    - libgmp3-dev
    - make
    - libonig-dev
    - libreadline-dev
    - libxslt1-dev
    - curl
    - libffi-dev
    - gcc
    - g++
    - libsodium-dev
    - openssl
    - build-essential
    - libcurl3-openssl-dev
    - libmagickcore-dev
    - libmagickwand-dev
    - pkg-config
  ignore_errors: true
  when: ansible_os_family == "Debian" 

- name: Install dependencies RedHat
  package:
    name: "{{ item }}"
    state: latest
  with_items:
    - libxml2 
    - libxml2-devel 
    - openssl 
    - openssl-devel 
    - libcurl 
    - libcurl-devel 
    - libjpeg 
    - libjpeg-devel 
    - libpng 
    - libpng-devel 
    - freetype 
    - freetype-devel 
    - php-mcrypt 
    - libmcrypt 
    - libmcrypt-devel 
    - pcre-devel
    - pcre 
    - libicu-devel 
    - gcc 
    - gcc-c++ 
    - autoconf  
    - zlib 
    - zlib-devel 
    - glibc 
    - glibc-devel 
    - glib2 
    - glib2-devel 
    - ncurses 
    - ncurses-devel 
    - curl 
    - curl-devel 
    - krb5-devel 
    - libidn 
    - libidn-devel 
    - openldap 
    - openldap-devel 
    - nss_ldap 
    - jemalloc-devel 
    - cmake 
    - boost-devel 
    - bison 
    - automake 
    - libevent 
    - libevent-devel 
    - gd 
    - gd-devel 
    - libtool* 
    - libmcrypt 
    - libmcrypt-devel 
    - mcrypt 
    - mhash 
    - libxslt 
    - libxslt-devel 
    - readline 
    - readline-devel 
    - gmp 
    - gmp-devel 
    - libcurl 
    - libcurl-devel 
    - openjpeg-devel
    - ImageMagick-devel
  ignore_errors: true
  when: ansible_os_family == "RedHat"  

- name: Create www group
  group:
    name: www
    system: true
    state: present

- name: Create www user
  user:
    name: www
    system: true
    shell: /bin/false
    group: www
    createhome: no  

- name: Create dir
  file:
    path: "{{ php_root_dir.split('/')[0:-1] | join('/') }}"
    state: directory
    owner: root
    group: root
    mode: 0755

- name: Unarchive package
  unarchive:
    copy: false
    src: "{{ php_url }}"
    dest: /tmp
    owner: root
    group: root
    mode: 0755

- name: Download openssl cert
  get_url:
    url: https://curl.se/ca/cacert.pem
    dest: /etc/ssl/cert.pem
    mode: "0755"
    owner: root
    group: root   

- name: Create logs dir
  file:
    path: "{{ php_log_dir }}"
    state: directory
    owner: root
    group: root
    mode: 0755

- name: Install {{ php_version }}
  shell: |
        chdir="/tmp/{{ php_version }}"
        sudo ./configure --prefix={{ php_root_dir }} \
            --with-config-file-path={{ php_root_dir }}/etc \
            --with-config-file-scan-dir={{ php_root_dir }}/etc/php.d \
            --enable-fpm \
            --with-fpm-user=www \
            --with-fpm-group=www \
            --with-mhash \
            --with-openssl \
            --with-mysqli=mysqlnd \
            --with-pdo-mysql=mysqlnd \
            --with-iconv \
            --with-zlib \
            --enable-inline-optimization \
            --disable-debug \
            --disable-rpath \
            --enable-shared \
            --enable-bcmath \
            --enable-shmop \
            --enable-sysvsem \
            --enable-gd \
            --with-jpeg \
            --with-freetype \
            --enable-mbregex \
            --enable-mbstring \
            --enable-ftp \
            --enable-pcntl \
            --enable-sockets \
            --enable-soap \
            --without-pear \
            --with-gettext \
            --enable-session \
            --with-curl  \
            --enable-opcache \
            --without-gdbm \
            --enable-fast-install \
            --enable-fileinfo \
            --with-zip \
            --enable-fileinfo
        sudo make -j4
        sudo make install

- name: Create php config
  template:
    dest: "{{ php_root_dir }}/etc"
    src: php.ini
    owner: root
    group: root
    mode: 0644   

- name: Create php-fpm config
  template:
    dest: "{{ php_root_dir }}/etc/php-fpm.conf"
    src: php-fpm.conf.j2
    owner: root
    group: root
    mode: 0644 

- name: Create php service file
  template:
    dest: "/lib/systemd/system/{{ php_service }}.service"
    src: php-fpm.service.j2
    owner: root
    group: root
    mode: 0644

- name: Start php-fpm service
  service:
    name: "{{ php_service }}"
    state: started
    enabled: true
    daemon_reload: yes

- name: update php environment
  shell: |
    echo "export PATH={{ php_root_dir }}/bin:\$PATH" >> /etc/profile